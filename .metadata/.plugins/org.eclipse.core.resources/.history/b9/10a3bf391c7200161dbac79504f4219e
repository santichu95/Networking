package foodnetwork.serialization.test;



import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNot;
import org.junit.Assert;
import org.junit.Test;

import foodnetwork.serialization.*;

public class FoodItemTest {
	
	final String encoding = "ASCII";

	//CHANGE THIS TO BE FoodNetwork, EOFException for FoodItem(MessageInput in)
	
	
	/******ASK DONAHOO
	 * @throws UnsupportedEncodingException 
	 * @throws FoodNetworkException 
	 * @throws EOFException *******/
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnTrash() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("ajskdfajslk;therkjsdf;lkajsdft".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = EOFException.class)
	public void testFoodNetworkExceptionThrownOnNullMI() throws FoodNetworkException, EOFException {
	
		FoodItem fi = new FoodItem(new MessageInput(null));
	
		
	}
	
	@Test (expected = EOFException.class)
	public void testFoodNetworkExceptionThrownOnNullBAIS() throws FoodNetworkException, EOFException {
		ByteArrayInputStream bi = null;
		FoodItem fi = new FoodItem(new MessageInput(bi));
	
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void test0CharCountMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("0 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = EOFException.class)
	public void test0CharCountEmptyMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test 
	public void testMinInfoMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BL5 5 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test 
	public void testMinInfoMI0FatAndCalConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 ÈL0 0 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = EOFException.class)
	public void testEOFMinInfoMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BL5 5".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEMinInfoMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BN5 5 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidCalMinInfoMIConstructor() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BB-5 5 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor1() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BB5 a.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor2() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor3() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 8. ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor4() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 8.".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor5() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 a.8".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEInvalidFatMinInfoMIConstructor6() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 8.a".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = EOFException.class)
	public void testEOFInvalidFatMinInfoMIConstructor7() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1 BS5 8".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnNegDouble() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB60 -4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownNegativeSize() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("-4 PlumB60 -4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnNegCalories() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB-60 4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionASpace() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("A ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionLongLimitsOnCalories() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumL2147483648 4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionDoubleLimits() throws FoodNetworkException, EOFException {
	
		
		try {
			Double d = 1.0+(Double.MAX_VALUE);
			String str = "4 PlumL50 " + d.toString() + " "; 
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream(str.getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test 
	public void test2Objects() throws FoodNetworkException, EOFException{		
		try {
			MessageInput mi = new MessageInput(new ByteArrayInputStream("4 PlumB50 4.8 6 CarrotL2147483647 5.8 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);
			
			
			FoodItem fi2 = new FoodItem(mi);
			
			
			System.out.println("fi name: " + fi.getName());
			System.out.println("fi mealType: " + fi.getMealType());
			System.out.println("fi2 name: " + fi2.getName());
			System.out.println("fi2 mealType: " + fi2.getMealType());
			
			
			Assert.assertEquals("Plum", fi.getName());
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
			Assert.assertEquals(50, fi.getCalories());
			Assert.assertEquals("4.8", fi.getFat());
			Assert.assertNotEquals(fi.getName(), fi2.getName());
			Assert.assertEquals("Carrot", fi2.getName());
			Assert.assertEquals(MealType.Lunch, fi2.getMealType());
			Assert.assertEquals(2147483647, fi2.getCalories());
			Assert.assertEquals("5.8", fi2.getFat());
			
			
			//fi.setName("Carrot");
			//Assert.assertEquals("Carrot", fi.getName());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	@Test 
	public void testEncode2ObjectsParamConstructor() throws FoodNetworkException, EOFException{		
		
		ByteArrayOutputStream bo = new ByteArrayOutputStream();
		MessageOutput mo = new MessageOutput(bo);
		FoodItem fi = new FoodItem("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", MealType.Breakfast, 50, "4.8");
		
		FoodItem fi2 = new FoodItem("PlumLenser", MealType.getMealType('L'), 60, "5.8");
		fi.encode(mo);
		fi2.encode(mo);
		
		
		System.out.println("fi name: " + fi.getName());
		System.out.println("fi mealType: " + fi.getMealType());
		System.out.println("fi2 name: " + fi2.getName());
		System.out.println("fi2 mealType: " + fi2.getMealType());
		
		
		Assert.assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", fi.getName());
		Assert.assertEquals(MealType.Breakfast, fi.getMealType());
		Assert.assertEquals(50, fi.getCalories());
		Assert.assertEquals("4.8", fi.getFat());
		Assert.assertNotEquals(fi.getName(), fi2.getName());
		Assert.assertEquals("PlumLenser", fi2.getName());
		Assert.assertEquals(MealType.Lunch, fi2.getMealType());
		Assert.assertEquals(60, fi2.getCalories());
		Assert.assertEquals("5.8", fi2.getFat());
			
			
			
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testEncodeThrowFNE2Objects() throws FoodNetworkException, EOFException{		
		try {
			MessageInput mi = new MessageInput(new ByteArrayInputStream("4 PlumB50 4.8 6 CarrotL2147483648 5.8 ".getBytes(encoding)));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			FoodItem fi = new FoodItem(mi);
			FoodItem fi2 = new FoodItem(mi);
			fi.encode(mo);
			
			Assert.assertEquals("4 PlumB50 4.8 ", bo.toString());
			fi2.encode(mo);
		
			
			
			System.out.println("fi name: " + fi.getName());
			System.out.println("fi mealType: " + fi.getMealType());
			System.out.println("fi2 name: " + fi2.getName());
			System.out.println("fi2 mealType: " + fi2.getMealType());
			
			
			Assert.assertEquals("Plum", fi.getName());
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
			Assert.assertEquals(50, fi.getCalories());
			Assert.assertEquals("4.8", fi.getFat());
			Assert.assertNotEquals(fi.getName(), fi2.getName());
			Assert.assertEquals("Carrot", fi2.getName());
			Assert.assertEquals(MealType.Lunch, fi2.getMealType());
			Assert.assertEquals(60, fi2.getCalories());
			Assert.assertEquals("5.8", fi2.getFat());
			

			
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
	}
	
	@Test
	public void testEncodeLargeName() throws FoodNetworkException, EOFException{		
		try {
			MessageInput mi = new MessageInput(new ByteArrayInputStream("100 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB50 4.8 6 CarrotL2147483647 5.8 ".getBytes(encoding)));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			FoodItem fi = new FoodItem(mi);
			FoodItem fi2 = new FoodItem(mi);
			fi.encode(mo);
			fi2.encode(mo);
			
			
			System.out.println("fi name: " + fi.getName());
			System.out.println("fi mealType: " + fi.getMealType());
			System.out.println("fi2 name: " + fi2.getName());
			System.out.println("fi2 mealType: " + fi2.getMealType());
			
			
			Assert.assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", fi.getName());
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
			Assert.assertEquals(50, fi.getCalories());
			Assert.assertEquals("4.8", fi.getFat());
			Assert.assertNotEquals(fi.getName(), fi2.getName());
			Assert.assertEquals("Carrot", fi2.getName());
			Assert.assertEquals(MealType.Lunch, fi2.getMealType());
			Assert.assertEquals(2147483647, fi2.getCalories());
			Assert.assertEquals("5.8", fi2.getFat());
			
			
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
	}
	
	
	@Test 
	public void testEncode2Objects() throws FoodNetworkException, EOFException{		
		try {
			MessageInput mi = new MessageInput(new ByteArrayInputStream("4 PlumB50 4.8 6 CarrotL60 5.8 ".getBytes(encoding)));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			FoodItem fi = new FoodItem(mi);
			FoodItem fi2 = new FoodItem(mi);
			fi.encode(mo);
			Assert.assertEquals("4 PlumB50 4.8 ", bo.toString());
			fi2.encode(mo);
			Assert.assertEquals("4 PlumB50 4.8 6 CarrotL60 5.8 ", bo.toString());
			
			
			System.out.println("fi name: " + fi.getName());
			System.out.println("fi mealType: " + fi.getMealType());
			System.out.println("fi2 name: " + fi2.getName());
			System.out.println("fi2 mealType: " + fi2.getMealType());
			
			
			Assert.assertEquals("Plum", fi.getName());
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
			Assert.assertEquals(50, fi.getCalories());
			Assert.assertEquals("4.8", fi.getFat());
			Assert.assertNotEquals(fi.getName(), fi2.getName());
			Assert.assertEquals("Carrot", fi2.getName());
			Assert.assertEquals(MealType.Lunch, fi2.getMealType());
			Assert.assertEquals(60, fi2.getCalories());
			Assert.assertEquals("5.8", fi2.getFat());
			System.out.println("fi.toString(): " + fi.toString());
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
	}
	
	
	@Test 
	public void test3Objects() throws FoodNetworkException, EOFException{		
		try {
			MessageInput mi = new MessageInput(new ByteArrayInputStream("4 PlumB50 4.8 6 CarrotL60 5.8 6 OrangeD75 3.5 ".getBytes(encoding)));
			
			FoodItem fi = new FoodItem(mi);
			FoodItem fi2 = new FoodItem(mi);
			FoodItem fi3 = new FoodItem(mi);
			
			
			System.out.println("fi name: " + fi.getName());
			System.out.println("fi mealType: " + fi.getMealType());
			System.out.println("fi2 name: " + fi2.getName());
			System.out.println("fi2 mealType: " + fi2.getMealType());
			
			System.out.println("fi3 name: " + fi3.getName());
			System.out.println("fi3 mealType: " + fi3.getMealType());
			
			
			Assert.assertEquals("Plum", fi.getName());
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
			Assert.assertEquals(50, fi.getCalories());
			Assert.assertEquals("4.8", fi.getFat());
			Assert.assertNotEquals(fi.getName(), fi2.getName());
			Assert.assertEquals("Carrot", fi2.getName());
			Assert.assertEquals(MealType.Lunch, fi2.getMealType());
			Assert.assertEquals(60, fi2.getCalories());
			Assert.assertEquals("5.8", fi2.getFat());
			Assert.assertEquals("Orange", fi3.getName());
			Assert.assertEquals(MealType.Dinner, fi3.getMealType());
			Assert.assertEquals(75, fi3.getCalories());
			Assert.assertEquals("3.5", fi3.getFat());
			
			
			
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
	}
	
	
	@Test(expected = EOFException.class)
	public void testEOFNetworkExceptionThrownNo2ndSpace() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = EOFException.class)
	public void testEOFNetworkExceptionThrown2ndSpace() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = EOFException.class)
	public void testEOFNetworkExceptionThrownLessChars() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plu".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = EOFException.class)
	public void testEOFNothingAfterName() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = EOFException.class)
	public void testEOFNothingAfterMT() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testEOFSpaceAfterMT() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = EOFException.class)
	public void testEOFNothingAfterCal() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testFNEWrongMT() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumN".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testFNEWrongCal() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB5.0".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownNoSpaceAfterCal() throws FoodNetworkException, EOFException {
	
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum504.7".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownNoSpaceAfterFat() throws FoodNetworkException, EOFException {
	
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum50 4.7".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownWrongFat() throws FoodNetworkException, EOFException {
	
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum50 4.a".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownWrongFatADot4() throws FoodNetworkException, EOFException {
	
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum50 a.4".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEExceptionThrownOnEverythingWNoSpaces() throws FoodNetworkException, EOFException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4PlumB504.8".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	/*@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnEverythingW1Space() throws EOFException, FoodNetworkException {
	
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB504.8".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}*/
	
	@Test
	public void testandCatchFoodNetworkExceptionOnTrash()  {
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("ajskdfajslk;therkjsdf;lkajsdft".getBytes(encoding))));
		} catch (UnsupportedEncodingException | FoodNetworkException e) {
			
		}

	}
	
	@Test(expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownWithOverBounds() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumLenser50 4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test(expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOverBounds() throws FoodNetworkException, EOFException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plumlenser50 4.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	
	//Change to EOF
	@Test 
	public void testFoodNetworkExceptionThrownOnTrashWithSpace(){
		FoodItem fi;
		try{
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("ajskdfajslk;therkjsdf;lkajsdft ".getBytes(encoding))));
		}
		catch(FoodNetworkException | UnsupportedEncodingException e){
			System.err.println("Error: " + e.getMessage());
		}
		

	}
	
	//Change to EOF
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownDoubleSpaceMessage() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("  ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	//Change to EOF
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownSingleSpaceMessage() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream(" ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnFatADot8ParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 80, "a.8");

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnFatNullParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 80, null);

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnNullNameParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(null, MealType.Lunch, 80, "a.8");

	}
	
	@Test (expected = FoodNetworkException.class)
	
	public void testFoodNetworkExceptionThrownOnNullCaloriesParamConstructor() throws EOFException, FoodNetworkException{
		
		FoodItem fi = new FoodItem(null, MealType.Lunch, 50, "8.8");

	}
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnFat8DotAParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 80, "8.a");

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnMaxCalParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 2147483648L, "8.5");

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionThrownOnFat8Dota() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	//2147483648
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionCharCaountTooLarge1() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4294967295 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionCharCaountTooLarge2() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("2147483648 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionCharCaountNegativeCharCount() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("-1 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionCharCaountDoubleCharCount() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("1.4 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionTooLarge() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4294967295 PlumB50 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionTooLargeCalories() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB4294967295 8.a ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFoodNetworkExceptionTooLargeCalories2() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB2147483648 8.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
	
	
	
	
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown0PieceMessage() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test 
	public void testEOFExceptionCatchOnEmptyString() {
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("".getBytes(encoding))));
		} catch (FoodNetworkException | UnsupportedEncodingException e) {
			
		}
	}
	
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown14SpaceMessage() throws FoodNetworkException, EOFException {
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test(expected = EOFException.class)
	public void testEOFExceptionThrown1SpaceMessage() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrownNo2ndSpace() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plu".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	//Ask Dr. Donahoo
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown2ndSpace() throws EOFException, UnsupportedEncodingException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plu ".getBytes(encoding))));
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testEOFExceptionThrown2ndSpaces() throws EOFException, UnsupportedEncodingException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plu  ".getBytes(encoding))));
	}
	
	
	//Right a test testing limits of double
	//Right a test testing limits of character count and calories
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown1PieceMessage() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 Plum".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown2PieceMessageNoSpace() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = EOFException.class)
	public void testEOFExceptionThrown3PieceMessage3Spaces() throws FoodNetworkException, EOFException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 8.8".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	
	
	
	

	
	
	
	
	
	//Test to make sure the names are equal with the ParamConstructor
	@Test
	public void testEqualNamesParamConstructor1() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4, "4");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test
	public void testEqualNamesParamConstructor2() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4, "4.5");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testThrowFoodNetworkExceptionCaloriesTooLarge1() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4294967295L, "4");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test 
	public void testThrowFoodNetworkExceptionCaloriesBounds() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 2147483647, "4");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testThrowFoodNetworkExceptionCaloriesTooLarge2() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 2147483648L, "4");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	
	@Test (expected = FoodNetworkException.class)
	public void testThrowFoodNetworkExceptionInvalidFat1() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 2147483647, "4.a");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testThrowFoodNetworkExceptionInvalidFat2() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 2147483647, "4.");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testThrowFoodNetworkExceptionInvalidFat3() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 2147483647, "a.4");
		Assert.assertEquals("Names are the same", name, fi.getName());
	}
	
	
	@Test
	public void testNamesNotEqualParamConstructor() throws FoodNetworkException{
		String name = "plum";
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 4, "4");
		Assert.assertNotEquals(name, fi.getName());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNonValidNameParamConstructor() throws FoodNetworkException{
		String name = "";
		
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4, "4.8");		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNullNameParamConstructor() throws FoodNetworkException{
		String name = null;
		
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4, "4.8");
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNull2NameParamConstructor() throws FoodNetworkException{
		
		FoodItem fi = new FoodItem(null, MealType.Breakfast, 4, "4.8");
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testSetNullNameParamConstructor() throws FoodNetworkException, EOFException{
		String name = null;
		
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		
		
		
		fi.setName(name);
	}
	
	
	
	
	
	@Test
	public void testSetNameParamConstructor() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem("Carrot", MealType.Lunch, 4, "1.2");
		fi.setName(name);
		Assert.assertEquals(name, fi.getName());
	}
	
	@Test
	public void testSetNameParamConstructorNotEqual() throws FoodNetworkException{
		String name = "Plum";
		FoodItem fi = new FoodItem("Carrot", MealType.Lunch, 4, "1.2");
		fi.setName(name);
		Assert.assertEquals(name, fi.getName());
	}
	
	@Test
	public void testSetNameMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.7 ".getBytes(encoding))));
			fi.setName("Carrot");
			Assert.assertEquals("Carrot", fi.getName());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	
	@Test(expected = FoodNetworkException.class)
	public void testSetNameThrowException() throws FoodNetworkException{
		String name = "";
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 45, "4.3");
		fi.setName(name);
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testSetNameMIConstructorThrowException() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 4.7 ".getBytes(encoding))));
			fi.setName("");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
	}
	
	
	
	
	@Test
	public void testAndCatchNonValidNameParamConstructor(){
		String name = "";
		
		FoodItem fi = new FoodItem(name, MealType.Breakfast, 4, "4.8");
	}

	
	//Test that the names are equal with the MessageInput constructor
	@Test
	public void testEqualNamesMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "Plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("4 PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);
			//System.out.println("Name: " + fi.getName());
			Assert.assertEquals(name, fi.getName());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCharCountForNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "Plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("A PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidEmptyForNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "Plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream(" PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidPeriodCharCountForNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "Plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream(". PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalid2SpacesCharCountForNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "Plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("  PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Test 
	public void testNamesNotEqualMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = "plum";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("4 PlumB50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);
			//System.out.println("Name: " + fi.getName());
			Assert.assertNotEquals(name, fi.getName());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNonValidNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("0 B50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//System.out.println("Name: " + fi.getName());
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNullNameMIConstructor() throws FoodNetworkException, EOFException {
		MessageInput mi;
		String name = null;
		String message = "0 " + name + "B50 4 ";
		try {
			mi = new MessageInput(
					new ByteArrayInputStream(message.getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//System.out.println("Name: " + fi.getName());
		
	}
	
	@Test 
	public void testAndCatchNonValidNameMIConstructor() {
		MessageInput mi;
		try {
			mi = new MessageInput(
					new ByteArrayInputStream("0 B50 4 ".getBytes(encoding)));
			FoodItem fi = new FoodItem(mi);
		} catch (FoodNetworkException | UnsupportedEncodingException e1) {
			
		}
		 
	}
	
	
	
	
	
	//Test for FoodNetworkException, with test case mi = new MessageInput(
	//new ByteArrayInputStream("10 PlumlenseB50 4 ".getBytes(encoding)));
	
	//Test "5000000000 5bilchar stringB50 4.8 
		//Do this to make sure that nothing that is too big for a string is put within fooditem,
		//and that it throws the correct exception
	
	
	//Tests that mealTypes are equal with the Param Constructor
	@Test
	public void testValidMealTypeBreakfastParamConstructor() throws FoodNetworkException{
		MealType mt = MealType.Breakfast;
		FoodItem fi = new FoodItem("Plum", mt, 4, "4.5");
		Assert.assertEquals("MealType's are equal", fi.getMealType(), mt);
	}
	
	@Test
	public void testMealTypeBreakfastGetMealTypeCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 4, "4.5");
		//System.out.println("getMealTypeCode() is " + fi.getMealType().getMealTypeCode());
		Assert.assertEquals('B', fi.getMealType().getMealTypeCode());
	}
	
	@Test
	public void testValidMealTypeLunchParamConstructor() throws FoodNetworkException{
		MealType mt = MealType.Lunch;
		FoodItem fi = new FoodItem("Plum", mt, 4, "4.5");
		
		Assert.assertEquals("MealType's are equal", fi.getMealType(), mt);
	}
	
	@Test
	public void testMealTypeLunchGetMealTypeCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Lunch, 4, "4.5");
		//System.out.println("fi.getMealType(): " + fi.getMealType()); 
		//System.out.println("getMealTypeCode() is " + fi.getMealType().getMealTypeCode() + " should be L");
		Assert.assertEquals('L', fi.getMealType().getMealTypeCode());
	}

	
	@Test
	public void testValidMealTypeDinnerParamConstructor() throws FoodNetworkException{
		MealType mt = MealType.Dinner;
		FoodItem fi = new FoodItem("Plum", mt, 4, "4.5");
		Assert.assertEquals("MealType's are equal", fi.getMealType(), mt);
	}
	
	@Test
	public void testMealTypeDinnerGetMealTypeCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Dinner, 4, "4.5");
		Assert.assertEquals('D', fi.getMealType().getMealTypeCode());
	}
	
	@Test
	public void testValidMealTypeSnackParamConstructor() throws FoodNetworkException{
		MealType mt = MealType.Snack;
		FoodItem fi = new FoodItem("Plum", mt, 4, "4.5");
		Assert.assertEquals("MealType's are equal", fi.getMealType(), mt);
	}
	
	@Test
	public void testMealTypeSnackGetMealTypeCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Snack, 4, "4.5");
		Assert.assertEquals('S', fi.getMealType().getMealTypeCode());
	}
	
	
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidMealTypeGetMealTypeCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('N'), 4, "4.5");
		Assert.assertEquals('\0', fi.getMealType().getMealTypeCode());
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidMealTypeGetMealTypeLowerbCodeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('b'), 4, "4.5");
		
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidMealTypeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('N'), 4, "5.6");
		
	}
	
	@Test//(expected = FoodNetworkException.class)
	public void testAndCatchInvalidMealTypeMIShortenedNameConstructor() {
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PluB50 5.8 ".getBytes(encoding))));
			//System.out.println("get Name: " + fi.getName());
		} catch (FoodNetworkException e) {
			
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	
	
	
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidEmptyCharMealTypeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType(' '), 4, "5.6");
		
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidCharMealTypeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('b'), 4, "5.6");
		
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidCharMealTypeLowerLParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('l'), 4, "5.6");
		
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidCharMealTypeLowerDParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('d'), 4, "5.6");
		
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testInvalidCharMealTypeLowerSParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('s'), 4, "5.6");
		
	}
	
	@Test
	public void testAndCatchInvalidMealTypeParamConstructor(){
		try {
			FoodItem fi = new FoodItem("Plum", MealType.getMealType('N'), 4, "5.6");
		} catch (FoodNetworkException e) {
			
		}
	}
	
	
	
	@Test
	public void testSetMealTypeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "4.0");
		fi.setMealType(MealType.Lunch);
		Assert.assertEquals(MealType.Lunch, fi.getMealType());
	}
	
	@Test
	public void testSetMealTypeMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			fi.setMealType(MealType.Lunch);
			Assert.assertEquals(MealType.Lunch, fi.getMealType());
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	@Test(expected = FoodNetworkException.class)
	public void testSetMealTypeThrowExceptionParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "4.0");
		fi.setMealType(MealType.getMealType('M'));
	}
	
	@Test(expected = FoodNetworkException.class)
	public void testSetMealTypeThrowExceptionMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			fi.setMealType(MealType.getMealType('M'));		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testSetMealTypeException() throws FoodNetworkException {
	
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "4.0");
		fi.setMealType(MealType.getMealType('M'));
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidMealTypeException() throws FoodNetworkException {
	
		FoodItem fi = new FoodItem("Plum", MealType.getMealType('M'), 50, "4.0");
		
		
		
	}
	
	
	
	//@Test(expected = FoodNetworkException.class)
	//public void test
	
	
	//Tests that mealTypes given a code are the same using the Parameter constuctor
	@Test
	public void testValidMealTypeBreakfastParamConstructorViaCode() throws FoodNetworkException{
		MealType mt = MealType.getMealType('B');
		FoodItem fi = new FoodItem("Plum", mt, 4, "4");
		Assert.assertEquals(fi.getMealType(), mt);
		
	}
	
	@Test
	public void testValidMealTypeLunchParamConstructorViaCode() throws FoodNetworkException{
		MealType mt = MealType.getMealType('L');
		FoodItem fi = new FoodItem("Plum", mt, 4, "4");
		Assert.assertEquals(fi.getMealType(), mt);
	}
	
	@Test
	public void testValidMealTypeDinnerParamConstructorViaCode() throws FoodNetworkException{
		MealType mt = MealType.getMealType('D');
		FoodItem fi = new FoodItem("Plum", mt, 4, "4");
		Assert.assertEquals(fi.getMealType(), mt);
	}
	
	@Test
	public void testValidMealTypeSnackParamConstructorViaCode() throws FoodNetworkException{
		MealType mt = MealType.getMealType('S');
		FoodItem fi = new FoodItem("Plum", mt, 4, "4");
		Assert.assertEquals(fi.getMealType(), mt);
	}
	
	@Test
	public void testValidMealTypeBreakfastMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			Assert.assertEquals(MealType.Breakfast, fi.getMealType());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testValidMealTypeLunchMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumL50 5.8 ".getBytes(encoding))));
			Assert.assertEquals(MealType.Lunch, fi.getMealType());

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testValidMealTypeDinnerMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumD50 5.8 ".getBytes(encoding))));
			Assert.assertEquals(MealType.Dinner, fi.getMealType());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testValidMealTypeSnackMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumS50 5.8 ".getBytes(encoding))));
			Assert.assertEquals(MealType.Snack, fi.getMealType());

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testValidMealTypeGetMTCodeBreakfastMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			Assert.assertEquals('B', fi.getMealType().getMealTypeCode());
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testValidMealTypeGetMTCodeLunchMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumL50 5.8 ".getBytes(encoding))));
			Assert.assertEquals('L', fi.getMealType().getMealTypeCode());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testValidMealTypeGetMTCodeDinnerMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumD50 5.8 ".getBytes(encoding))));
			Assert.assertEquals('D', fi.getMealType().getMealTypeCode());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testValidMealTypeGetMTCodeSnackMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumS50 5.8 ".getBytes(encoding))));
			Assert.assertEquals('S', fi.getMealType().getMealTypeCode());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidMealType() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumN50 5.8 ".getBytes(encoding))));
			Assert.assertEquals('S', fi.getMealType().getMealTypeCode());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	/****CALORIES
	 * @throws FoodNetworkException *****/
	
	@Test
	public void testSetCaloriesParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "5.8");
		fi.setCalories(70L);
		Assert.assertEquals(70L, fi.getCalories());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testSetCaloriesInvalidParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "5.8");
		fi.setCalories(-70L);
		//Assert.assertEquals(70L, fi.getCalories());
	}
	
	@Test
	public void testSetCaloriesMIConstructor() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			fi.setCalories(70L);
			Assert.assertEquals(70L, fi.getCalories());
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testSetCaloriesParamConstructorNotEqual() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "5.8");
		fi.setCalories(70L);
		Assert.assertNotEquals(80L, fi.getCalories());
	}
	
	@Test
	public void testSetCaloriesMIConstructorNotEqual() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			fi.setCalories(70L);
			Assert.assertNotEquals(80L, fi.getCalories());
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testValidCaloriesParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "5.8");
		Assert.assertEquals(50L, fi.getCalories());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCaloriesParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, -50, "5.8");
		Assert.assertEquals(50L, fi.getCalories());
	}
	
	@Test
	public void testNotEqualCaloriesParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "5.8");
		Assert.assertNotEquals(60L, fi.getCalories());
	}
	
	
	@Test
	public void testValidCaloriesMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes(encoding))));
			Assert.assertEquals(50L, fi.getCalories());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCaloriesMIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumBa7 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCalories1MIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumBaa 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCalories2MIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB8.9 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidCalories3MIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB8. 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test 
	public void testInvalidCalories4MIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB8 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidNegCaloriesMIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB-50 5.8 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInValidCalories5ParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, -50, "4.9");
	}
	
	@Test
	public void testValidCalories6ParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 5, "4.8");
	}
	
	
	//FAT
	@Test (expected = FoodNetworkException.class)
	public void testInValidFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "");
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInValidFatNegativeParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, "-5.8");
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInValidFatSpaceParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Plum", MealType.Breakfast, 50, " S");
	}
	
	
	@Test
	public void testSetFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "4.7" );
		fi.setFat("4.8");
		Assert.assertEquals("4.8", fi.getFat());
	}
	
	@Test
	public void testSetFatParamConstructorNotEquals() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "4.7" );
		String prevFat = fi.getFat();
		fi.setFat("4.8");
		Assert.assertNotEquals(prevFat, fi.getFat());
	}
	
	@Test
	public void testSetFatMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes())));
		fi.setFat("4.7");
		Assert.assertEquals("4.7", fi.getFat());
	}
	
	@Test
	public void testSetFatMIConstructorNotEquals() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes())));
		String prevFat = fi.getFat();
		fi.setFat("4.7");
		System.out.println("getFat() " + fi.getFat());
		
		Assert.assertNotEquals(prevFat, fi.getFat());
	}
	
	@Test
	public void testValidFatParamConstructorEquals() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "4.7" );
		Assert.assertEquals("4.7", fi.getFat());
	}
	
	@Test
	public void testValidFatParamConstructorNotEquals() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "4.7" );
		Assert.assertNotEquals("4.5", fi.getFat());
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "" );
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidNegFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "-6.7" );
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalid6DotFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "6." );
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testNullInvalidFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, null );
	}
	
	
	
	
	@Test
	public void testValidFatMIConstructorEquals() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes())));
		
		Assert.assertEquals("5.8", fi.getFat());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidFat3DotMIConstructorEquals() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5. ".getBytes())));
	}
	
	@Test
	public void testValidFatMIConstructorNotEquals() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.8 ".getBytes())));
		
		Assert.assertNotEquals("5.5", fi.getFat());
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidFatMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 5.a ".getBytes())));
		
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidNegFatMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 -5.7 ".getBytes())));
		
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalid2FatMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 a.a ".getBytes())));
		
		
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalid3FatMIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 a.5 ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	
	//ASK DONAHOO ABOUT THIS ONE
	@Test (expected = FoodNetworkException.class)
	public void testInvalidEmptyFatMIConstructor() throws EOFException, FoodNetworkException{
		String str = "4 PlumB" + "" + " ";
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream(str.getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalidEmptyFatParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.getMealType('L'),60, "");
	}
	
	
	
	@Test (expected = FoodNetworkException.class)
	public void testInvalid4FatMIConstructor() throws EOFException, FoodNetworkException{
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("4 PlumB50 ahahahahhashehth ".getBytes(encoding))));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	
	//ENCODE
	/*String name = null;
	
	FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
	ByteArrayOutputStream bo = new ByteArrayOutputStream();
	MessageOutput mo = new MessageOutput(bo);
	fi.encode(mo);
	Assert.assertArrayEquals("6 CarrotB4 4.8 ".getBytes("ASCII"), bo.toByteArray());*/
	
	@Test
	public void testTwoFIEncodedEqualsParamConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		ByteArrayOutputStream bo = new ByteArrayOutputStream();
		MessageOutput mo = new MessageOutput(bo);
		fi.encode(mo);
		
		System.out.println("encoded string:" + bo.toString());
		System.out.println("mo:" + mo.toString());
		
		System.out.println("These two should be Equal");
		System.out.print("b1: ");
		byte[] b = bo.toByteArray();
		for(int i = 0; i < b.length; i++){
			System.out.print(b[i] + " ");
		}
		System.out.println();
		
		
		FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
		MessageOutput mo2 = new MessageOutput(bo2);
		
		fi2.encode(mo2);
		System.out.println("mo2: " + mo2.toString());
		System.out.print("b2: ");
		byte[] b2 = bo2.toByteArray();
		for(int i = 0; i < b2.length; i++){
			System.out.print(b2[i] + " ");
		}
		System.out.println();
		System.out.println();
		
		
		Assert.assertArrayEquals(b, b2);
		
	}
	
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEOnEncodeNullBAOSParamConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		ByteArrayOutputStream bo = null;
		MessageOutput mo = new MessageOutput(bo);
		fi.encode(mo);
		
		
		
		
		
	
	}
	
	@Test (expected = FoodNetworkException.class)
	public void testFNEOnEncodeNullMOParamConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		ByteArrayOutputStream bo = new ByteArrayOutputStream();
		MessageOutput mo = null;
		fi.encode(mo);
		
		System.out.println("encoded string:" + bo.toString());
		
		
		System.out.println("These two should be Equal");
		System.out.print("b1: ");
		byte[] b = bo.toByteArray();
		for(int i = 0; i < b.length; i++){
			System.out.print(b[i] + " ");
		}
		System.out.println();
	
	}
	
	
	@Test
	public void testTwoFIEncodedNotEqualsParamConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.7");
		ByteArrayOutputStream bo = new ByteArrayOutputStream();
		MessageOutput mo = new MessageOutput(bo);
		fi.encode(mo);
		
		System.out.println("These two should not be Equal");
		System.out.print("b1: ");
		byte[] b = bo.toByteArray();
		for(int i = 0; i < b.length; i++){
			System.out.print(b[i] + " ");
		}
		System.out.println();
		
		FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
		MessageOutput mo2 = new MessageOutput(bo2);
		fi2.encode(mo2);
		
		System.out.print("b2: ");
		byte[] b2 = bo2.toByteArray();
		for(int i = 0; i < b2.length; i++){
			System.out.print(b2[i] + " ");
		}
		System.out.println();
		System.out.println();
		
		
		Assert.assertThat(b, IsNot.not(IsEqual.equalTo(b2)));
		Assert.assertNotEquals(bo.toString(), bo2.toString());
		Assert.assertNotEquals(fi.toString(), fi2.toString());
		Assert.assertNotEquals(bo2.toString(), bo.toString());

	}
	
	@Test
	public void testTwoFIEncodedEqualsMIConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB40 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			fi.encode(mo);
			
			System.out.println("mo.toString():" + mo.toString());
			
			System.out.println("These two should be Equal");
			System.out.print("b1: ");
			byte[] b = bo.toByteArray();
			for(int i = 0; i < b.length; i++){
				System.out.print(b[i] + " ");
			}
			System.out.println();
		
			
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB40 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
			MessageOutput mo2 = new MessageOutput(bo2);
			fi2.encode(mo2);
			
			System.out.println("mo2.toString():" + mo2.toString());
			
			System.out.print("b2: ");
			byte[] b2 = bo2.toByteArray();
			for(int i = 0; i < b2.length; i++){
				System.out.print(b2[i] + " ");
			}
			System.out.println();
			System.out.println();
			//System.out.println("mo2: " + bo2.toByteArray());
			
			
			Assert.assertArrayEquals(b, b2);
			Assert.assertEquals(bo.toString(), bo2.toString());
			Assert.assertEquals(fi.toString(), fi2.toString());
			Assert.assertEquals(bo2.toString(), bo.toString());

			
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}
	
	@Test
	public void testTwoFIEncodedNotEqualsMIConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			fi.encode(mo);
			
			
			System.out.println("These two should not be Equal");
			System.out.print("b1: ");
			byte[] b = bo.toByteArray();
			for(int i = 0; i < b.length; i++){
				System.out.print(b[i] + " ");
			}
			System.out.println();
			
			
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
			MessageOutput mo2 = new MessageOutput(bo2);
			
			fi2.encode(mo2);
			System.out.println("mo2.toString():" + mo2.toString());
			
			
			System.out.print("b2: ");
			byte[] b2 = bo2.toByteArray();
			for(int i = 0; i < b2.length; i++){
				System.out.print(b2[i] + " ");
			}
			System.out.println();
			System.out.println();
			//System.out.println("mo2: " + bo2.toByteArray());
			
			Assert.assertThat(b, IsNot.not(IsEqual.equalTo(b2)));
			Assert.assertNotEquals(bo.toString(), bo2.toString());
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(bo2.toString(), bo.toString());

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoFIEncodedEqualsDifferentConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			fi.encode(mo);
			
			
			System.out.println("These two should be Equal");
			System.out.print("b1: ");
			byte[] b = bo.toByteArray();
			for(int i = 0; i < b.length; i++){
				System.out.print(b[i] + " ");
			}
			System.out.println();
			
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4.5");
			ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
			MessageOutput mo2 = new MessageOutput(bo2);
			fi2.encode(mo2);
			
			System.out.print("b2: ");
			byte[] b2 = bo2.toByteArray();
			for(int i = 0; i < b2.length; i++){
				System.out.print(b2[i] + " ");
			}
			System.out.println();
			System.out.println();
			
			Assert.assertArrayEquals(b, b2);
			
			Assert.assertEquals(bo.toString(), bo2.toString());
			Assert.assertEquals(bo2.toString(), bo.toString());

			Assert.assertEquals(fi.toString(), fi2.toString());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoFIEncodedNotEqualsDifferentConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 4.5 ".getBytes("ASCII"))));
			ByteArrayOutputStream bo = new ByteArrayOutputStream();
			MessageOutput mo = new MessageOutput(bo);
			fi.encode(mo);
			
			
			System.out.println("These two should be Equal");
			System.out.print("b1: ");
			byte[] b = bo.toByteArray();
			for(int i = 0; i < b.length; i++){
				System.out.print(b[i] + " ");
			}
			System.out.println();
			
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4.5");
			ByteArrayOutputStream bo2 = new ByteArrayOutputStream();
			MessageOutput mo2 = new MessageOutput(bo2);
			fi2.encode(mo2);
			
			System.out.print("b2: ");
			byte[] b2 = bo2.toByteArray();
			for(int i = 0; i < b2.length; i++){
				System.out.print(b2[i] + " ");
			}
			System.out.println();
			System.out.println();
			
			Assert.assertThat(b, IsNot.not(IsEqual.equalTo(b2)));
			Assert.assertNotEquals(bo.toString(), bo2.toString());
			Assert.assertNotEquals(bo2.toString(), bo.toString());
			Assert.assertNotEquals(fi.toString(), fi2.toString());

		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	
	//Equals
	@Test
	public void testTwoEqualParamConstructors() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");

		Assert.assertTrue(fi.equals(fi2));
		Assert.assertTrue(fi2.equals(fi));
	}
	
	@Test
	public void testNotTwoEqualParamConstructors() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.7");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");

		Assert.assertFalse(fi.equals(fi2));
		Assert.assertFalse(fi2.equals(fi));
	}
	
	@Test
	public void testNotTwoEqualSwappedParamConstructors() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Breakfast, 4, "4.8");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 4, "4.7");

		Assert.assertFalse(fi.equals(fi2));
		Assert.assertFalse(fi2.equals(fi));
	}
	
	
	@Test
	public void testTwoEqualMIConstructors() throws EOFException, FoodNetworkException{
		
		try {
			FoodItem fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2;
			fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
			Assert.assertTrue(fi.equals(fi2));
			Assert.assertTrue(fi2.equals(fi));
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
	}
	
	
	
	@Test
	public void testTwoNotEqualMIConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));

			Assert.assertFalse(fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoNotEqualSwappedMIConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));

			Assert.assertFalse(fi.equals(fi2));
			
			System.out.println("fi.equals(fi2): " + fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));
			
			System.out.println("fi2.equals(fi): " + fi2.equals(fi));
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoFatsNotEqualMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.0 ".getBytes("ASCII"))));
			System.out.println("fi.getFat(): "+ fi.getFat());
			System.out.println("fi2.getFat(): " + fi2.getFat());
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertNotEquals(fi.getFat(), fi2.getFat());
			System.out.println("fi.equals(fi2): " + fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));
			Assert.assertNotEquals(fi, fi2);
			Assert.assertNotEquals(fi2, fi);
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(fi2.toString(), fi.toString());
			System.out.println("fi2.equals(fi): " + fi2.equals(fi));
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoFatsNotEqualMIConstructorSwapped() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.0 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5 ".getBytes("ASCII"))));
			System.out.println("fi.getFat(): "+ fi.getFat());
			System.out.println("fi2.getFat(): " + fi2.getFat());
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertNotEquals(fi.getFat(), fi2.getFat());
			System.out.println("fi.equals(fi2): " + fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));
			Assert.assertNotEquals(fi, fi2);
			Assert.assertNotEquals(fi2, fi);
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(fi2.toString(), fi.toString());
			System.out.println("fi2.equals(fi): " + fi2.equals(fi));
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Test
	public void testTwoEqualDifferentConstructors() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.8 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4.8");
			
			System.out.println("fi.equals(fi2): " + fi.equals(fi2));
			Assert.assertTrue(fi.equals(fi2));
			

			System.out.println("fi2.equals(fi): " + fi2.equals(fi));

			Assert.assertTrue(fi2.equals(fi));
		

			
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoNotEqualDifferentConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.8 ".getBytes("ASCII"))));
			
			FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "4.8");
			System.out.println("fi.equals(fi2): " + fi.equals(fi2));
			System.out.println("fi2.equals(fi): " + fi2.equals(fi));
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoNotEqualSwappedDifferentConstructors() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 4.8 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4.8");
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertFalse(fi2.equals(fi));

		}catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testTwoNotEqualFats() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4.0");
			System.out.println("fi.getFat(): "+ fi.getFat());
			System.out.println("fi2.getFat(): " + fi2.getFat());
			Assert.assertNotEquals(fi, fi2);
			Assert.assertNotEquals(fi2, fi);
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(fi2.toString(), fi.toString());
			Assert.assertNotEquals(fi.getFat(), fi2.getFat());
			
			Assert.assertFalse(fi2.equals(fi));

		}catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	@Test
	public void testTwoNotEqualFatsSwapped() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.0 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "4");
			System.out.println("fi.getFat(): "+ fi.getFat());
			System.out.println("fi2.getFat(): " + fi2.getFat());
			Assert.assertNotEquals(fi, fi2);
			Assert.assertNotEquals(fi2, fi);
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(fi2.toString(), fi.toString());
			Assert.assertNotEquals(fi.getFat(), fi2.getFat());
			
			Assert.assertFalse(fi2.equals(fi));

		}catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	@Test
	public void testTwoNotEqualFatsSwapped2() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 4.0 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.getMealType('B'), 50, "4");
			System.out.println("fi.getFat(): "+ fi.getFat());
			System.out.println("fi2.getFat(): " + fi2.getFat());
			
			Assert.assertFalse(fi.equals(fi2));
			Assert.assertNotEquals(fi.getFat(), fi2.getFat());
			
			Assert.assertNotEquals(fi, fi2);
			Assert.assertNotEquals(fi2, fi);
			Assert.assertNotEquals(fi.toString(), fi2.toString());
			Assert.assertNotEquals(fi2.toString(), fi.toString());
			
			Assert.assertFalse(fi2.equals(fi));

		}catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	//Hashcode
	@Test
	public void testEqualHashCodesParamConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Lunch, 50, "4.8");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "4.8");
		int fiHash = fi.hashCode();
		int fi2Hash = fi2.hashCode();
		Assert.assertEquals(fiHash, fi2Hash);
	}
	
	@Test
	public void testInEqualHashCodesParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Lunch, 50, "4.7");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "4.8");
		int fiHash = fi.hashCode();
		int fi2Hash = fi2.hashCode();
		Assert.assertNotEquals(fiHash, fi2Hash);
	}
	
	@Test
	public void testInEqualHashCodesSwappedParamConstructor() throws FoodNetworkException{
		FoodItem fi = new FoodItem("Carrot", MealType.Lunch, 50, "4.8");
		FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "4.7");
		int fiHash = fi.hashCode();
		int fi2Hash = fi2.hashCode();
		Assert.assertNotEquals(fiHash, fi2Hash);
	}
	
	@Test
	public void testEqualHashCodesMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
		
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertEquals(fiHash, fi2Hash);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testInEqualHashCodesMIConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
		
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertNotEquals(fiHash, fi2Hash);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testInEqualHashCodesMIConstructorSwapped() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
		
			FoodItem fi2 = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertNotEquals(fiHash, fi2Hash);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testEqualHashCodesDifferentConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "5.6");
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertEquals(fiHash, fi2Hash);
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testInEqualHashCodesDifferentConstructor() throws EOFException, FoodNetworkException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotL50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Breakfast, 50, "5.6");
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertNotEquals(fiHash, fi2Hash);
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@Test
	public void testInEqualHashCodesDifferentConstructorSwapped() throws FoodNetworkException, EOFException{
		FoodItem fi;
		try {
			fi = new FoodItem(new MessageInput(new ByteArrayInputStream("6 CarrotB50 5.6 ".getBytes("ASCII"))));
			FoodItem fi2 = new FoodItem("Carrot", MealType.Lunch, 50, "5.6");
			int fiHash = fi.hashCode();
			int fi2Hash = fi2.hashCode();
			Assert.assertNotEquals(fiHash, fi2Hash);
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	//Add test for toString()
	
	//Add tests for values and valueOf of MealType


}
